pipeline {
    agent {
        docker {
            image 'python:3.10-slim'
            args '--user root'
        }
    }
    stages {
        stage('Setup') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y curl
                    pip install --no-cache-dir -r requirements.txt
                    python -m playwright install --with-deps chromium
                '''
            }
        }
        stage('Test') {
            steps {
                sh '''
                    pytest tests/test_gmail_login.py --junitxml=test-results.xml >> build.log 2>&1 || exit 1
                '''
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'test-results.xml,build.log', allowEmptyArchive: true
        }
        failure {
            script {
                // Capture and filter console log
                def consoleLog
                try {
                    consoleLog = readFile('build.log') ?: 'No log available'
                    consoleLog = consoleLog.split('\n').findAll { 
                        it.contains('ERROR') || it.contains('FAIL') || it.contains('exception') || it.contains('not found')
                    }.join('\n')
                    if (consoleLog.length() > 5000) {
                        consoleLog = consoleLog.substring(0, 5000) + '\n[Log truncated]'
                    }
                    if (!consoleLog) {
                        consoleLog = 'No error details found in log'
                    }
                } catch (Exception e) {
                    consoleLog = "Failed to read log: ${e.message}"
                }

                // Prepare prompt for LLM
                def prompt = """
                Triage the following Jenkins pipeline error log and identify the cause of the failure. Suggest possible fixes or next steps for debugging. Keep the response concise and structured:
                - **Failure Cause**: [Describe the root cause]
                - **Suggested Fix**: [Provide actionable steps]
                - **Additional Notes**: [Optional context or warnings]
                
                Error Log:
                ${consoleLog}
                """

                // Send log to LLM with retry and longer timeout
                def llmResponse = 'No response from LLM'
                try {
                    retry(3) {
                        echo "Attempting to contact LLM server..."
                        def response = httpRequest(
                            url: 'http://10.18.2.4:5000/generate',
                            httpMode: 'POST',
                            contentType: 'APPLICATION_JSON',
                            requestBody: groovy.json.JsonOutput.toJson([
                                model: 'codellama',
                                prompt: prompt
                            ]),
                            validResponseCodes: '200:299',
                            timeout: 120,
                            noProxyHost: '10.18.2.4'
                        )
                        llmResponse = response.content ?: 'Empty response from LLM'
                        echo "Received LLM response: ${llmResponse.take(100)}..."
                    }
                } catch (Exception e) {
                    echo "Failed to contact LLM: ${e.message}"
                    llmResponse = "Error: Failed to contact LLM server - ${e.message}"
                }

                // Save and archive response
                writeFile file: 'llm-triage-result.txt', text: llmResponse
                archiveArtifacts artifacts: 'llm-triage-result.txt', allowEmptyArchive: true
            }
        }
        always {
            cleanWs()
        }
    }
}