pipeline {
    agent any
    
    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        stage('Setup') {
            steps {
                sh '''
                    sudo apt-get update
                    sudo apt-get install -y curl
                    sudo python3 -m venv venv
                    ls
                    sudo ./venv/bin/activate
                    sudo pip install --no-cache-dir -r requirements.txt
                    sudo python -m playwright install --with-deps chromium
                '''
            }
        }
        stage('Test') {
            steps {
                sh '''
                    sudo pytest tests/test_gmail_login.py --junitxml=test-results.xml >> build.log 2>&1 || exit 1
                '''
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'test-results.xml,build.log', allowEmptyArchive: true
            cleanWs()
        }
        failure {
            script {
                def consoleLog
                try {
                    consoleLog = readFile('build.log') ?: 'No log available'
                    consoleLog += "\nPipeline console log:\n${currentBuild.rawBuild.getLog(1000).join('\n')}"
                    consoleLog = consoleLog.split('\n').findAll {
                        it.contains('ERROR') || it.contains('FAIL') || it.contains('exception') ||
                        it.contains('not found') || it.contains('fatal') || it.contains('timeout') ||
                        it.contains('refused') || it.contains('sudo') || it.contains('cd:')
                    }.join('\n') ?: 'No error details found in logs'
                    if (consoleLog.length() > 5000) {
                        consoleLog = consoleLog.substring(0, 5000) + '\n[Log truncated]'
                    }
                } catch (Exception e) {
                    consoleLog = "Failed to read logs: ${e.message}"
                }

                def llmResponse = 'No response from LLM'
                try {
                    echo "Attempting to contact LLM server..."
                    retry(3) {
                        def response = httpRequest(
                            url: 'http://10.1.148.59:5000/generate',
                            httpMode: 'POST',
                            contentType: 'APPLICATION_JSON',
                            requestBody: groovy.json.JsonOutput.toJson([
                                model: 'codellama',
                                prompt: """
                                Triage the following Jenkins pipeline error log and identify the cause of the failure. Suggest possible fixes or next steps for debugging. Keep the response concise and structured:
                                - **Failure Cause**: [Describe the root cause]
                                - **Suggested Fix**: [Provide actionable steps]
                                - **Additional Notes**: [Optional context or warnings]
                                
                                Error Log:
                                ${consoleLog}
                                """
                            ]),
                            validResponseCodes: '200:299',
                            timeout: 180,
                            consoleLogResponseBody: true,
                            customHeaders: [[name: 'Connection', value: 'keep-alive']]
                        )
                        llmResponse = response.content ?: 'Empty response from LLM'
                        echo "Received LLM response: ${llmResponse.take(100)}..."
                    }
                } catch (Exception e) {
                    llmResponse = "Error: Failed to contact LLM server - ${e.message}\n\nLog for manual triage:\n${consoleLog}"
                    echo "LLM error: ${e.message}"
                }

                writeFile file: 'llm-triage-result.txt', text: llmResponse
                sh "ls -la llm-triage-result.txt || echo 'File not found'"
                sh "cat llm-triage-result.txt || echo 'Failed to read file'"
                sh "pwd && ls -la ${WORKSPACE}"
                archiveArtifacts artifacts: 'llm-triage-result.txt', allowEmptyArchive: true
            }
        }
    }
}
